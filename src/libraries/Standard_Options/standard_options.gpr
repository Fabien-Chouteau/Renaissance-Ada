--  This project is introduced to let all Ada projects within Renaissance-Ada use the same options.
--
--  Our philosophy is
--  1. to check as much as possible automatically.
--  2. to use standard / default options whenever possible.
--  3. to treat warnings as errors.

abstract project Standard_Options is

   package Ide is
      for Vcs_Kind use "Git";
      for Vcs_Repository_Root use "C:\path\to\Renaissance-Ada";
   end Ide;

   type Mode_Type is ("debug", "release");
   Mode : Mode_Type := external ("Mode", "debug");

   package Builder is
      --  see https://docs.adacore.com/gnat_ugn-docs/html/gnat_ugn/gnat_ugn/building_executable_programs_with_gnat.html for more info on the build switches
      for Default_Switches ("Ada") use
        ( "-s"                            --  Recompile if compiler switches have changed since last compilation.
        , "-j0"                           --  Use the maximum number of parallel compilations processes to carry out the (re)compilations.
        );

      case Mode is
      when "debug" =>
          for Default_Switches ("ada") use Builder'Default_Switches ("ada") &
            ( "-g"                        --  Enable debugging. This switch is simply passed to the compiler and to the linker.
            );
      when "release" =>
          null;
      end case;
   end Builder;

   package Compiler is
      --  see https://docs.adacore.com/gnat_ugn-docs/html/gnat_ugn/gnat_ugn/building_executable_programs_with_gnat.html for more info on the compiler switches
      for Default_Switches ("ada") use
        ( "-gnat2022"                      --  Allow full Ada 2022 features
        , "-fstack-check"                  --  Activates stack checking.
        , "-gnata"                         --  Assertions enabled.
        , "-gnatwae"                       --  a - Activate most optional warnings.
                                           --  e - Treat warnings and style checks as errors.
        , "-gnatyy"                        --  Enable built-in style checks (Set all standard style check options)
        , "-Wall"                          --  This switch enables most warnings from the GCC back end.
        , "-Werror"                        --  This switch causes warnings from the GCC back end to be treated as errors.
        );

      case Mode is
      when "debug" =>
         for Default_Switches ("ada") use Compiler'Default_Switches ("ada") &
           ( "-gnateE"                     --  Generate extra information in exception messages.
           , "-g"                          --  Generate debugging information.
                                           --  TODO: is flag needed? See same flag in Builder which is passed on to the compiler.
           );
      when "release" =>
         for Default_Switches ("ada") use Compiler'Default_Switches ("ada") &
           ("-O3" );
      end case;
   end Compiler;

   package Binder is
      for Default_Switches ("Ada") use
      ( "-E"                               --  Currently the same as -Ea:
                                           --  Store tracebacks in exception occurrences when the target supports it. The “a” is for hexadecimal “address”.
      );
   end Binder;

   package Linker is
      --  only default settings
   end Linker;

   package Check is
       --  see https://docs.adacore.com/live/wave/asis/html/gnatcheck_rm/gnatcheck_rm.html
       --  The default behavior is that all the rule checks are disabled.
       for Default_Switches ("Ada") use ("-rules" , "-from=../../Misc/Standard_Options/gnatcheck.rules");

       --  TODO: use path from repository root (to be able to use standard options in project at different depth in the file system)
       --  Unfortunately, a rule file is not project-aware, and there is no way to do this directly.
       --  But you may try out the following workaround - specify Identifier_Casing rule not
       --  in the rule file, but directly in the Check package of your project:

       --  for Default_Switches ("ada") use (..., "-rules", "+RIdentifier_Casing:Exclude=" & Repository_Root & ...);
   end Check;

   package CodePeer is
       --  only default setting for CodePeer
   end CodePeer;

   package Pretty_Printer is
       --  only default setting for GNATPP
   end Pretty_Printer;

end Standard_Options;
